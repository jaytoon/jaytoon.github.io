[{"id":"9af6e0f3e444d0cf6f2fff56f9719d7b","title":"博客美化","content":"写在前面本博客网站使用Aurora v1.5.5 主题进行搭建，以下内容仅适合该主题的配置，其他主题请自行尝试\n1.渐变色配置1.1渐变色网站推荐\nGradihunt: Automated Gradient Generator\nGradient by ShapeFactory\nFresh Background Gradients \n\n1.2使用方法以Gradient by ShapeFactory为例\n\n复制到任意位置,为如下格式\nbackground-image: linear-gradient(25deg, #7f4fd0, #857dcd, #83a8c9, #76d2c4)\n\n打开你的_config.aurora.yml文件，找到gradient,将上述的四个颜色依次填入对应位置保存\ngradient:\n  color_1: '#7f4fd0'\n  color_2: '#857dcd'\n  color_3: '#83a8c9'\n  color_4: '#76d2c4'\n\n在GitBash中切换到你的博客所在位置进行一键三连\nhexo cl &amp;&amp; hexo g &amp;&amp; hexo s\n\n打开你的本地网址https://localhost:4000进行访问即可\n2.替换默认文章封面图片由于已经替换了网站的主题色，默认的封面图片已经不协调，考虑到主题作者提到项目是利用vue3进行编写，所以有了简单的“狸猫换太子”的想法。\n2.1 壁纸网站推荐\nBeautiful Free Images &amp; Pictures | Unsplash\nFree high resolution photography - Life of Pix - Home\nAwesome Wallpapers - wallhaven.cc\npexels.com\n必应每日高清壁纸  (ioliu.cn)\nPixabay\n\n2.2 使用方法\n将你下载好的图片进行保存，然后找到图片所在的位置\n\n进入你的博客目录并进入默认封面所在的文件夹，你可以根据我的文件夹路径推断\nD:\\Blog\\node_modules\\hexo-theme-aurora\\source\\static\\img\n\n默认的封面文件名复制下来，将你下载的文件的文件名改成默认的文件名\n\n进行“狸猫换太子”，把默认的封面图片替换成你下载的图片即可\n\n在GitBash中切换到你的博客所在位置进行一键三连\nhexo cl &amp;&amp; hexo g &amp;&amp; hexo s\n\n打开你的本地网址https://localhost:4000进行访问即可\n\n\n","slug":"博客美化","date":"2022-10-16T06:09:42.000Z","categories_index":"","tags_index":"博客搭建之路","author_index":"Jaytoon"},{"id":"caa735e5750e92fd7b1a4e63e5621700","title":"利用hexo搭建静态博客","content":"待写\n","slug":"利用hexo搭建静态博客","date":"2022-10-16T04:13:01.000Z","categories_index":"","tags_index":"博客搭建之路","author_index":"Jaytoon"},{"id":"ee099929a3be821a34fd40a319c6a132","title":"PicGo图床搭建","content":"1.PicGo安装根据PicGo官方文档进行下载安装即可，根绝个人喜好下载相应版本，建议下载稳定版。\n1.1提供的Windows下载地址\n蓝奏云下载地址:密码:akb1\n百度网盘 下载地址提取码：3wln\n\n2.使用B站搭建图床PicGo中搜索插件bilibili并进行安装，浏览器中打开 哔哩哔哩动画，如果你和我一样使用的是chrome系浏览器（Edge），按住Fn+F12或者F12（具体打开方式可以百度），或者鼠标右键点击页面任意位置后选择检查元素调出开发者工具，点击加号选择应用程序，选择cookie，bilibili，找到SESSDATA对应的值进行复制，回到picgo然后填入相应的SESSDATA值，将bilibili设置为默认图床，打开Typora,按住Ctrl+逗号调出偏好设置,按照下图进行设置。PicGo路径选择你自己安装的路径即可，最后选择验证图片上传选项，弹出成功的提示，大功告成！\n\n2.1补充本人博客搭建使用了Hexo框架+Aurora v1.5.5 主题，为正常在博客中显示图片，需要在_config.aurora.yml文件中找到injects，替换为如下部分：\ninjects:\n  scripts:\n  css:\n    - &lt;meta name=\"referrer\" content=\"no-referrer\">\n\n当然如果你在injects已经有别的内容，建议直接增加标签即可，注意格式对齐。\n3.使用GitHub搭建图床请保证已经注册一个GitHub账号并且能够正常访问GitHub。首先新建一个仓库用来存放相应的图片，仓库名可以任意取一个你喜欢的名字。\n3.1GitHubTokens生成\n登录进入Github首页\n点击右上角的头像，选择【Settings】\n进入Settings后，点击左侧下方的【Developer settings】\n网页跳转后，选左边的【Personal access tokens】，点击【Generate a personal access token】\n【Note】里填写为什么创建这个Token，可随意填写，下方勾上【repo】即可\n然后会生成一条Token信息，生成的Token只会出现一次，记得复制保存。\n\n\n3.2PicGo设置打开运行PicGo，左侧打开【图床设置】，选择【GitHub图床】。参数设置说明：\n\n仓库名：表示远程仓库地址，固定格式 Github用户名&#x2F;仓库名，前期准备用到的仓库（注意：仓库名不能有空格，如果有空格需要使用-代替）\n分支名：表示分支，默认填入master，需要根据自己Github上的分支进行填写，看个人设置\nToken：填入Github中生成的Token，就是让复制保存的那个\n存储路径：可以自定义一个文件路径\n自定义域名：建议使用https:cdn.jsdelivr.net&#x2F;gh&#x2F;Github用户名&#x2F;仓库名最后记得【设为默认图床】\n\n\n3.3验证图片上传在Typora偏好设置的那个界面，点击左下的【验证图片上传选项】，一般还会出现以下三种情况：\n\nFailed to fetch \n解决办法：打开【PicGo设置】，点击【设置Server选项】，将端口改为【36677】端口，这是PicGo推荐的默认端口号，然后保存，成功。\n\n\n“success”:false \n解决方法：打开【PicGo设置】，将【时间戳重命名】打开\n\n\n如果报服务端错误解决方法\n\n注意：\n分支名：由master改为main\n自定义域名：https://cdn.jsdelivr.net/gh/用户名/仓库名\n\n\n\n参考链接:Bilibili获取SESSDATA · 语雀 (yuque.com)\nTypora使用github图床\n","slug":"picgo图床折腾","date":"2022-10-15T19:34:46.000Z","categories_index":"","tags_index":"博客搭建之路","author_index":"Jaytoon"},{"id":"9b1e49c0cf2beda8e46e78f90df1dad4","title":"指令级并行","content":"1.指令级并行1.1 循环调度1.1.1 未调度\n以下使用数字代表所在的时钟周期，如②代表第二个时钟周期\n②的停顿原因为浮点寄存器F0进行了写入后，需要一个时钟周期的停顿\n④和⑤的停顿原因为进行了浮点运算ADDD，需要停顿两个时钟周期\n⑧的停顿原因为R1为上一条指令的结果，需要停顿一个时钟周期\n⑩的停顿原因为分支指令有一个延时槽时间，延时槽中的指令一定会被执行\n1.1.2 调度后\n由于前置指令有数据相关，将⑦所对应的指令调度到第一个停顿，即调度后的②，剩下的⑨对应的指令调度到下一个停顿，调度到⑤而不是④的原因为调度到④后，原⑥所对应的指令将无法进行执行，调度到⑤后由于分支指令有一个时钟周期的延时槽，⑥对应的指令将被执行。\n1.1.3 循环展开将循环进行展开若干次(如四次)后，可以将相同的数据写入指令等进行集中执行（如同时取出多个数）展开后可以减少引入分支指令的停顿占比，但由于展开后进行数据处理会需要更多的不同名寄存器，代码量也会成倍增加。\n1.2 动态调度1.2.1 记分牌技术\n指令乱序执行，无数据相关，解决写后读\n1.2.1.1 指令流出检查指令所需的功能部件空闲，所使用的目的寄存器和正在执行指令的目的寄存器不同（保证无WAW）\n1.2.1.2 读操作数如果正在执行的指令对当前指令的源寄存器的写操作，那么该指令阻塞在功能部件处直到指令所需的所有源寄存器就绪（解决RAW）\n1.2.1.3 执行指令从已经就绪的源寄存器中取出操作数送到功能部件进行运算，产生计算结果后修改记分牌\n1.2.1.4 写结果先检查目的寄存器中的值是否被前面的指令读出使用（包括前面的指令没有读取操作数以及指令的源寄存器为当前指令的目的寄存器），将计算结果写入到目的寄存器（解决WAR）\n1.3 算法","slug":"指令级并行","date":"2022-10-15T08:45:40.000Z","categories_index":"","tags_index":"学习","author_index":"Jaytoon"},{"id":"8d8f32f65c9a573d05d620fdfbafdc11","title":"高级计算机体系结构复习笔记","content":"1.各种“相关”的学习1.1 考试技巧判断输出相关的技巧为指令左边出现同名的寄存器，则两条指令发生输出相关，判断真相关（数据相关中的一种）的技巧为先进入流水线的指令的目的寄存器和后一条指令的寄存器相同，产生数据流动，则这两条指令产生真相关，即先执行指令的左部寄存器和后执行的指令的右部的某一个寄存器相同，需要指出的是同一条指令中不发生真相关，如A&#x3D;A+B。\n1.2 补充说明循环相关是指在循环指令中，由于循环展开而导致的各种1.1中提到的各种相关，通常将循环展开两次到三次就可以判断循环相关所包含的指令。\n1.3 参考链接https://blog.csdn.net/weixin_42319408/article/details/103384820\n","slug":"新建博客文章名","date":"2022-10-14T11:03:41.000Z","categories_index":"","tags_index":"学习","author_index":"Jaytoon"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2022-10-14T08:30:52.267Z","categories_index":"","tags_index":"","author_index":"Jaytoon"}]