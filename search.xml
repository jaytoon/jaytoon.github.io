<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>A Comprehensive Survey on Distributed Training of Graph Neural Networks</title>
      <link href="//post/A-Comprehensive-Survey-on-Distributed-Training-of-Graph-Neural-Networks.html"/>
      <url>//post/A-Comprehensive-Survey-on-Distributed-Training-of-Graph-Neural-Networks.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-题目内容"><a href="#1-题目内容" class="headerlink" title="1.题目内容"></a>1.题目内容</h1><h1 id="2-我的解答"><a href="#2-我的解答" class="headerlink" title="2.我的解答"></a>2.我的解答</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 论文笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K20pro-MIUI</title>
      <link href="//post/K20pro-MIUI.html"/>
      <url>//post/K20pro-MIUI.html</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><h1 id="1-题目内容"><a href="#1-题目内容" class="headerlink" title="1.题目内容"></a>1.题目内容</h1><h1 id="2-我的解答"><a href="#2-我的解答" class="headerlink" title="2.我的解答"></a>2.我的解答</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 刷机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wallpaper favorites</title>
      <link href="//post/wallpaper-favorites.html"/>
      <url>//post/wallpaper-favorites.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-壁纸合集"><a href="#1-壁纸合集" class="headerlink" title="1.壁纸合集"></a>1.壁纸合集</h1><ul><li><a href="https://wallhere.com/">世界著名的壁纸网站 电脑桌面壁纸 - WallHere 壁纸库</a></li><li><a href="https://10wallpaper.com/cn/">美化你的桌面 - 最好的高品质4K,5K高清壁纸专辑免费下载网站 | 10wallpaper.com</a></li><li><a href="https://www.3gbizhi.com/">手机壁纸大全-高清好看的图片，明星，性感美女图片大全-3g壁纸 (3gbizhi.com)</a></li><li><a href="https://ss.netnr.com/wallpaper">最新壁纸 360壁纸 NET牛人 (netnr.com)</a></li><li><a href="https://desk.zol.com.cn/">【桌面壁纸】电脑桌面壁纸大全_高清壁纸-ZOL桌面壁纸</a></li><li><a href="http://cn.gde-fon.com/">为您的桌面壁纸和图片 cn.GdeFon.com (gde-fon.com)</a></li><li><a href="http://pic.netbian.com/">4K壁纸_4K电脑壁纸_4K高清壁纸_手机壁纸_4K,5K,6K,7K,8K壁纸图片素材_彼岸图网 (netbian.com)</a></li><li><a href="https://zhutix.com/animated/">动态壁纸 - 动态桌面 - 视频壁纸 - 致美化 - 漫锋网 (zhutix.com)</a></li><li><a href="https://anime-pictures.net/?lang=zh_CN">动漫图片和壁纸 (anime-pictures.net)</a></li><li><a href="https://www.dpm.org.cn/lights/royal.html">故宫壁纸 - 故宫博物院 (dpm.org.cn)</a></li><li><a href="https://www.wallpapermaiden.com/">High Quality Wallpapers, Desktop Backgrounds, Widescreen Wallpapers - WallpaperMaiden</a></li><li><a href="https://wallpapersden.com/">HD Wallpapers, 4K and 8K Wallpapers, Desktop and Mobile Backgrounds (wallpapersden.com)</a></li><li><a href="https://hdqwalls.com/">hdqwalls.com Best Source For HD,4k,5k,8k Wallpapers</a></li><li><a href="http://wallpaperswide.com/">WallpapersWide.com - Free 4K &amp; 8K UltraHD Desktop Backgound Wallpapers for UHD TV, Ultra Widescreen Desktop, Tablet, Smartphone &amp; Multi Display | Page 1</a></li><li><a href="https://www.lifeofpix.com/">Free high resolution photography - Life of Pix - Home</a></li><li><a href="https://wall.alphacoders.com/">Wallpaper Abyss - HD Wallpapers, Background Images (alphacoders.com)</a></li><li><a href="https://wallpapershome.com/">4k Wallpapers HD &amp; 8k Images for Desktop and Mobile (wallpapershome.com)</a></li><li><a href="https://wallpaperaccess.com/">Access to Thousands of Awesome Free HD Wallpapers (wallpaperaccess.com)</a></li><li><a href="https://wallpapersmug.com/">Free hd wallpapers for desktop, ipad, tablets, iphone, android phone (wallpapersmug.com)</a></li><li><a href="https://pixelz.cc/">Ultra-HD 4K, 8K, 16K, WQHD, Triple Monitor Wallpapers - Pixelz.cc</a></li><li><a href="http://wallls.com/">Most inspiring and awesome desktop wallpapers - Wallls.com</a></li><li><a href="https://www.goodfon.com/">Wallpapers, download free desktop wallpapers, beautiful widescreen, pics, pictures. The best pictures on your phone. (goodfon.com)</a> 速度较慢</li><li><a href="https://graffitiwallpaper.com/">Download Free Unique Nature Wallpaper - Android, iPhone, Desktop HD (graffitiwallpaper.com)</a></li><li><a href="https://www.wallpaperup.com/">Popular wallpapers | WallpaperUP</a></li><li><a href="https://wallpaperfx.com/">WallpaperFX - Mobile &amp; Desktop Wallpapers</a></li><li><a href="https://www.socwall.com/">Desktop Wallpaper - Social Wallpapering (socwall.com)</a></li><li><a href="https://www.wallpaperfusion.com/">WallpaperFusion • WallpaperFusion by Binary Fortress Software</a></li><li><a href="https://pickywallpapers.com/">Stunning HD Wallpapers - PickyWallpapers.com</a> 速度较慢</li><li><a href="https://beta.digitalblasphemy.com/product-category/wallpapers/">Product categories Wallpapers | Digital Blasphemy</a></li><li><a href="https://gratisography.com/">Gratisography - Free High-Resolution Stock Photos</a></li><li><a href="https://facets.la/collection">FACETS :: 365 :: Justin Maller</a></li><li><a href="https://vlad.studio/wallpapers/">Desktop wallpapers · Vladstudio</a></li><li><a href="http://justinmaller.com/">Justin M. Maller • Art Director &amp; Illustrator • Online Portfolio (justinmaller.com)</a> </li><li><a href="https://www.cgwallpapers.com/index.php">CGWallpapers.com</a></li><li><a href="https://cs-mod.ru/wallpapers/csgo">CS GO: Обои на рабочий стол — 1510 изображений (cs-mod.ru)</a></li><li><a href="https://www.eso.org/public/unitedkingdom/images/">Images | ESO United Kingdom</a></li><li><a href="https://www.nasa.gov/multimedia/imagegallery/iotd.html">NASA Image of the Day | NASA</a></li><li><a href="http://desktopwallpapers.org.ua/">桌面壁纸，桌面上的图片，下载免费桌面壁纸 (desktopwallpapers.org.ua)</a>速度较慢</li><li><a href="https://www.kwiatki.org/">Kwiaty (kwiatki.org)</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 平凡的日子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LEARN LOCALLY,CORRECT GLOBALLY</title>
      <link href="//post/LEARN-LOCALLY-CORRECT-GLOBALLY.html"/>
      <url>//post/LEARN-LOCALLY-CORRECT-GLOBALLY.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-背景"><a href="#1-背景" class="headerlink" title="1.背景"></a>1.背景</h1><p>大规模的图神经网络训练速度较慢，由于当前服务器的计算能力以及网络传输的带宽限制，利用数据并行进行训练加速或者进行采样缩小图的规模</p><p>通过现有采样技术缩小图的规模需要对数据进行集中式存储和训练，涉及隐私 分布式训练只需可信第三方服务器,图是相互关联的，做到数据并行有困难，直接切分图会丢失边的信息,有人提出在各节点服务器中传播图中节点的特征</p><h1 id="2-我的解答"><a href="#2-我的解答" class="headerlink" title="2.我的解答"></a>2.我的解答</h1><h2 id="2-1Local-Training-with-Periodic-Averaging"><a href="#2-1Local-Training-with-Periodic-Averaging" class="headerlink" title="2.1Local Training with Periodic Averaging"></a>2.1Local Training with Periodic Averaging</h2><p>每个机器在本地进行训练出一个忽略割边的GNN模型，然后发送到服务器进行周期性平均，然后得到周期平均后的模型继续进行训练，消除服务器之间的特征交换环节，减少通信开销，但导致了性能衰减由于忽略全局图结构以及不同机器间的节点依赖，</p><h2 id="2-2Global-Server-Correction"><a href="#2-2Global-Server-Correction" class="headerlink" title="2.2Global Server Correction"></a>2.2Global Server Correction</h2><p>在周期平均时增加一个阶段，利用可用的全局图结构修正局部训练出来的GNN模型</p><h2 id="2-3传统方法"><a href="#2-3传统方法" class="headerlink" title="2.3传统方法"></a>2.3传统方法</h2><p>1.使用最小分割图算法进行图分割，使得割边最少</p><p>2.使用重要性采样来分配节点到机器上 ？</p><p>3.从其他机器上进行图像采样得出一个子图，作为原始图的近似</p><p>？输入特征和隐藏特征？</p><p>同时通信输入特征和隐藏特征，能减少每轮的通信开销（由于隐藏嵌入的尺寸较小，需要的节点特征较少）</p><h1 id="3-算法具体步骤"><a href="#3-算法具体步骤" class="headerlink" title="3.算法具体步骤"></a>3.算法具体步骤</h1><h2 id="3-1本地周期平均训练"><a href="#3-1本地周期平均训练" class="headerlink" title="3.1本地周期平均训练"></a>3.1本地周期平均训练</h2><p>首先从服务器中接受到最新的模型参数，每个本地机器迭代Kp**t次进行本地模型的更新。开始时使用较小的步长保证在服务端进行模型平均时本地的模型不会过于发散，随着训练的进行，梯度减小，通信量增大，提高epoch size</p><h2 id="3-2全局矫正"><a href="#3-2全局矫正" class="headerlink" title="3.2全局矫正"></a>3.2全局矫正</h2><p>全局服务器校正的设计是为了保证训练好的模型不仅从每台本地机器上的数据中学习，还能学习图的全局结构，从而减少图划分带来的信息损失，避免割边。</p><h2 id="3-3单机上的GCN算法"><a href="#3-3单机上的GCN算法" class="headerlink" title="3.3单机上的GCN算法"></a>3.3单机上的GCN算法</h2><p>一层中的每个节点的更新依赖该节点的所有邻居节点经过本层网络的输出的平均，目标函数为所有节点的损失的平均。</p><p>梯度为每个小批次经过网络后最后输出的结果的损失函数的梯度平均</p><h2 id="3-4分布式GCN训练"><a href="#3-4分布式GCN训练" class="headerlink" title="3.4分布式GCN训练"></a>3.4分布式GCN训练</h2><p>大体上与单机上类似，不同的是采用了mini-batch来减小对内存的压力</p><h2 id="3-5图3的解释"><a href="#3-5图3的解释" class="headerlink" title="3.5图3的解释"></a>3.5图3的解释</h2><p>第一种情况为各个本地机器中通过节点的通信方式获得邻居节点的信息，梯度为两台机器上的平均。另一种情况为进行邻居节点采样后的梯度计算</p><h2 id="3-6"><a href="#3-6" class="headerlink" title="3.6"></a>3.6</h2><p>近邻采样和非线性激活导致了方差的下界</p><p>mini - batch的存在导致方差的存在，分小批次，不能保证每一批次更新的梯度相同</p><p>由于没有掌握图的全局特征以及邻接矩阵，在本地机器上对全局梯度的估计并不是无偏估计。对全局梯度估计的准确性对分类问题来说起到重要作用。局部随机梯度的期望是局部全批梯度的有偏估计，这是因为每个本地机器上的随机梯度是通过使用邻居采样计算的。</p><h1 id="4-实验部分"><a href="#4-实验部分" class="headerlink" title="4.实验部分"></a>4.实验部分</h1><p>实验环境说明：正常的分布式环境由网络相互连接的各个主机组成，但是本论文使用一台机器进行模拟，CPU作为服务器，8个GPU每个GPU为两个模拟的本地机器提供计算能力，</p><p>评价指标：通信大小和通信轮数，wall-clock 挂钟时间 运行程序所需要的时间（不用该评价指标）</p><p>算法对比的两个对象（baseline）：</p><ul><li>PSGD-PA 忽略切边，即直接对全局图进行切割后直接在本地机器上进行训练，然后将训练后的模型参数在服务器上进行平均，作为论文中通信代价比较的下界</li><li>GGS 使用全局邻居节点采样，克服上述缺陷但增大了通信开销（作为分布式GNN算法的代表）</li></ul><h1 id="5-贡献点"><a href="#5-贡献点" class="headerlink" title="5 .贡献点"></a>5 .贡献点</h1><p>1.提出</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 论文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EarnSomeMoney</title>
      <link href="//post/EarnSomeMoney.html"/>
      <url>//post/EarnSomeMoney.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-题目内容"><a href="#1-题目内容" class="headerlink" title="1.题目内容"></a>1.题目内容</h1><p><img src="https://i0.hdslb.com/bfs/album/a5ddcb00cb8554b377fb9cc2707cc67065aba033.png" alt="image-20221106002035529"></p><h1 id="2-我的解答"><a href="#2-我的解答" class="headerlink" title="2.我的解答"></a>2.我的解答</h1>]]></content>
      
      
      
        <tags>
            
            <tag> 生活感受 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows-Terminal美化</title>
      <link href="//post/Windows-Terminal%E7%BE%8E%E5%8C%96.html"/>
      <url>//post/Windows-Terminal%E7%BE%8E%E5%8C%96.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-题目内容"><a href="#1-题目内容" class="headerlink" title="1.题目内容"></a>1.题目内容</h1><h1 id="2-我的解答"><a href="#2-我的解答" class="headerlink" title="2.我的解答"></a>2.我的解答</h1>]]></content>
      
      
      
        <tags>
            
            <tag> Java力扣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>901. 股票价格跨度</title>
      <link href="//post/Java-leetcode-03.html"/>
      <url>//post/Java-leetcode-03.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-题目内容"><a href="#1-题目内容" class="headerlink" title="1.题目内容"></a>1.题目内容</h1><p>编写一个 StockSpanner 类，它收集某些股票的每日报价，并返回该股票当日价格的跨度。</p><p>今天股票价格的跨度被定义为股票价格小于或等于今天价格的最大连续日数（从今天开始往回数，包括今天）。</p><p>例如，如果未来7天股票的价格是 [100, 80, 60, 70, 60, 75, 85]，那么股票跨度将是 [1, 1, 1, 2, 1, 4, 6]。</p><p><strong>示例：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：[&quot;StockSpanner&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;,&quot;next&quot;], [[],[100],[80],[60],[70],[60],[75],[85]]输出：[null,1,1,1,2,1,4,6]解释：首先，初始化 S &#x3D; StockSpanner()，然后：S.next(100) 被调用并返回 1，S.next(80) 被调用并返回 1，S.next(60) 被调用并返回 1，S.next(70) 被调用并返回 2，S.next(60) 被调用并返回 1，S.next(75) 被调用并返回 4，S.next(85) 被调用并返回 6。注意 (例如) S.next(75) 返回 4，因为截至今天的最后 4 个价格(包括今天的价格 75) 小于或等于今天的价格。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><pre class="line-numbers language-none"><code class="language-none">调用 StockSpanner.next(int price) 时，将有 1 &lt;&#x3D; price &lt;&#x3D; 10^5。每个测试用例最多可以调用  10000 次 StockSpanner.next。在所有测试用例中，最多调用 150000 次 StockSpanner.next。此问题的总时间限制减少了 50%。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="2-我的解答"><a href="#2-我的解答" class="headerlink" title="2.我的解答"></a>2.我的解答</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">class</span> <span class="token class-name">StockSpanner</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Deque</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> stack<span class="token punctuation">;</span>    <span class="token keyword">int</span> idx<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">StockSpanner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayDeque</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        idx <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">int</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        idx<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>price <span class="token operator">>=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> ret <span class="token operator">=</span> idx <span class="token operator">-</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>idx<span class="token punctuation">,</span> price<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Your StockSpanner object will be instantiated and called as such: * StockSpanner obj = new StockSpanner(); * int param_1 = obj.next(price); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java力扣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>779. 第K个语法符号</title>
      <link href="//post/Java-leetcode-02.html"/>
      <url>//post/Java-leetcode-02.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-题目内容"><a href="#1-题目内容" class="headerlink" title="1.题目内容"></a>1.题目内容</h1><p>我们构建了一个包含 n 行( 索引从 1  开始 )的表。首先在第一行我们写上一个 0。接下来的每一行，将前一行中的0替换为01，1替换为10。</p><ul><li>例如，对于 n &#x3D; 3 ，第 1 行是 0 ，第 2 行是 01 ，第3行是 0110 。<br>给定行数 n 和序数 k，返回第 n 行中第 k 个字符。（ k 从索引 1 开始）</li></ul><p><strong>示例 1</strong>:</p><pre class="line-numbers language-none"><code class="language-none">输入: n &#x3D; 1, k &#x3D; 1输出: 0解释: 第一行：0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 2</strong>:</p><pre class="line-numbers language-none"><code class="language-none">输入: n &#x3D; 2, k &#x3D; 1输出: 0解释: 第一行: 0 第二行: 01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 3</strong>:</p><pre class="line-numbers language-none"><code class="language-none">输入: n &#x3D; 2, k &#x3D; 2输出: 1解释:第一行: 0第二行: 01<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提示:</p><ul><li>1 &lt;&#x3D; n &lt;&#x3D; 30</li><li>1 &lt;&#x3D; k &lt;&#x3D; 2n - 1</li></ul><h1 id="2-我的解答"><a href="#2-我的解答" class="headerlink" title="2.我的解答"></a>2.我的解答</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">kthGrammar</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> out<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> kCopy<span class="token operator">=</span>k<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">/</span><span class="token number">2</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            k<span class="token operator">=</span>k<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>         <span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> temp<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>kCopy<span class="token operator">-</span>temp<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    out<span class="token operator">=</span><span class="token operator">!</span>out<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>kCopy<span class="token operator">-</span>temp<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                kCopy<span class="token operator">-=</span>temp<span class="token punctuation">;</span>                out<span class="token operator">=</span><span class="token operator">!</span>out<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            count<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> out<span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="3-算法思想"><a href="#3-算法思想" class="headerlink" title="3.算法思想"></a>3.算法思想</h1><p>根据产生的字符串具有对称性和相同位置相反，使用非递归前推思想，首先确定当前的K所在的幂次，将K折返到上一个位置并取反，如此反复直到折叠到将count为0，若K的位置为2的整数次幂，那么将直接折返到剩余幂次数。设置的初始循环取反变量为false，每次折返进行取反，最后根据取反变量进行输出。</p><h1 id="4-学习思路"><a href="#4-学习思路" class="headerlink" title="4.学习思路"></a>4.学习思路</h1>]]></content>
      
      
      
        <tags>
            
            <tag> Java力扣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1700. 无法吃午餐的学生数量</title>
      <link href="//post/Java-leetcode-01.html"/>
      <url>//post/Java-leetcode-01.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-题目内容"><a href="#1-题目内容" class="headerlink" title="1.题目内容"></a>1.题目内容</h1><p>学校的自助午餐提供圆形和方形的三明治，分别用数字 0 和 1 表示。所有学生站在一个队列里，每个学生要么喜欢圆形的要么喜欢方形的。<br>餐厅里三明治的数量与学生的数量相同。所有三明治都放在一个 栈 里，每一轮：</p><p>如果队列最前面的学生 喜欢 栈顶的三明治，那么会 拿走它 并离开队列。<br>否则，这名学生会 放弃这个三明治 并回到队列的尾部。<br>这个过程会一直持续到队列里所有学生都不喜欢栈顶的三明治为止。</p><p>给你两个整数数组 students 和 sandwiches ，其中 sandwiches[i] 是栈里面第 i 个三明治的类型（i &#x3D; 0 是栈的顶部）， students[j] 是初始队列里第 j 名学生对三明治的喜好（j &#x3D; 0 是队列的最开始位置）。请你返回无法吃午餐的学生数量。</p><p>示例 1：</p><p>输入：students &#x3D; [1,1,0,0], sandwiches &#x3D; [0,1,0,1]<br>输出：0<br>解释：</p><ul><li><p>最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students &#x3D; [1,0,0,1]。</p></li><li><p>最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students &#x3D; [0,0,1,1]。</p></li><li><p>最前面的学生拿走最顶上的三明治，剩余学生队列为 students &#x3D; [0,1,1]，三明治栈为 sandwiches &#x3D; [1,0,1]。</p></li><li><p>最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students &#x3D; [1,1,0]。</p></li><li><p>最前面的学生拿走最顶上的三明治，剩余学生队列为 students &#x3D; [1,0]，三明治栈为 sandwiches &#x3D; [0,1]。</p></li><li><p>最前面的学生放弃最顶上的三明治，并回到队列的末尾，学生队列变为 students &#x3D; [0,1]。</p></li><li><p>最前面的学生拿走最顶上的三明治，剩余学生队列为 students &#x3D; [1]，三明治栈为 sandwiches &#x3D; [1]。</p></li><li><p>最前面的学生拿走最顶上的三明治，剩余学生队列为 students &#x3D; []，三明治栈为 sandwiches &#x3D; []。<br>所以所有学生都有三明治吃。</p><p>示例 2：</p></li></ul><p>输入：students &#x3D; [1,1,1,0,0,1], sandwiches &#x3D; [1,0,0,0,1,1]<br>输出：3</p><p>提示：</p><ul><li><p>1 &lt;&#x3D; students.length, sandwiches.length &lt;&#x3D; 100</p></li><li><p>students.length &#x3D;&#x3D; sandwiches.length</p></li><li><p>sandwiches[i] 要么是 0 ，要么是 1 。</p></li><li><p>students[i] 要么是 0 ，要么是 1 。</p></li></ul><h1 id="2-我的解答"><a href="#2-我的解答" class="headerlink" title="2.我的解答"></a>2.我的解答</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">countStudents</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> students<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sandwiches<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cunts<span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> students<span class="token punctuation">)</span> cunts<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>sandwiches<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">--</span>cunts<span class="token punctuation">[</span>sandwiches<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> sandwiches<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Java力扣 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客美化</title>
      <link href="//post/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96.html"/>
      <url>//post/%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96.html</url>
      
        <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>本博客网站使用Aurora v1.5.5 主题进行搭建，以下内容仅适合该主题的配置，其他主题请自行尝试</p><h1 id="1-渐变色配置"><a href="#1-渐变色配置" class="headerlink" title="1.渐变色配置"></a>1.渐变色配置</h1><h2 id="1-1渐变色网站推荐"><a href="#1-1渐变色网站推荐" class="headerlink" title="1.1渐变色网站推荐"></a>1.1渐变色网站推荐</h2><ul><li><a href="https://gradihunt.com/">Gradihunt: Automated Gradient Generator</a></li><li><a href="https://gradient.shapefactory.co/">Gradient by ShapeFactory</a></li><li><a href="https://webgradients.com/">Fresh Background Gradients </a></li></ul><h2 id="1-2使用方法"><a href="#1-2使用方法" class="headerlink" title="1.2使用方法"></a>1.2使用方法</h2><p>以<strong>Gradient by ShapeFactory</strong>为例</p><p><img src="https://i0.hdslb.com/bfs/album/20599c9311e0e06777360dd58cc02f478b9825e9.png" alt="image-20221016143120186"></p><p>复制到任意位置,为如下格式</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>25deg<span class="token punctuation">,</span> #7f4fd0<span class="token punctuation">,</span> #857dcd<span class="token punctuation">,</span> #83a8c9<span class="token punctuation">,</span> #76d2c4<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开你的_config.aurora.yml文件，找到gradient,将上述的四个颜色依次填入对应位置保存</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">gradient</span><span class="token punctuation">:</span>  <span class="token property">color_1</span><span class="token punctuation">:</span> <span class="token string">'#7f4fd0'</span>  <span class="token property">color_2</span><span class="token punctuation">:</span> <span class="token string">'#857dcd'</span>  <span class="token property">color_3</span><span class="token punctuation">:</span> <span class="token string">'#83a8c9'</span>  <span class="token property">color_4</span><span class="token punctuation">:</span> <span class="token string">'#76d2c4'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在GitBash中切换到你的博客所在位置进行一键三连</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cl <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开你的本地网址<a href="https://localhost:4000/">https://localhost:4000</a>进行访问即可</p><h1 id="2-替换默认文章封面图片"><a href="#2-替换默认文章封面图片" class="headerlink" title="2.替换默认文章封面图片"></a>2.替换默认文章封面图片</h1><p>由于已经替换了网站的主题色，默认的封面图片已经不协调，考虑到主题作者提到项目是利用vue3进行编写，所以有了简单的“狸猫换太子”的想法。</p><h2 id="2-1-壁纸网站推荐"><a href="#2-1-壁纸网站推荐" class="headerlink" title="2.1 壁纸网站推荐"></a>2.1 壁纸网站推荐</h2><ul><li><a href="https://unsplash.com/">Beautiful Free Images &amp; Pictures | Unsplash</a></li><li><a href="https://www.lifeofpix.com/">Free high resolution photography - Life of Pix - Home</a></li><li><a href="https://wallhaven.cc/">Awesome Wallpapers - wallhaven.cc</a></li><li><a href="https://www.pexels.com/zh-cn/">pexels.com</a></li><li><a href="https://bing.ioliu.cn/">必应每日高清壁纸  (ioliu.cn)</a></li><li><a href="https://pixabay.com/zh/">Pixabay</a></li></ul><h2 id="2-2-使用方法"><a href="#2-2-使用方法" class="headerlink" title="2.2 使用方法"></a>2.2 使用方法</h2><ul><li><p>将你下载好的图片进行保存，然后找到图片所在的位置</p></li><li><p>进入你的博客目录并进入默认封面所在的文件夹，你可以根据我的文件夹路径推断</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">D:<span class="token punctuation">\</span>Blog<span class="token punctuation">\</span>node_modules<span class="token punctuation">\</span>hexo-theme-aurora<span class="token punctuation">\</span>source<span class="token punctuation">\</span>static<span class="token punctuation">\</span>img<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>默认的封面文件名复制下来，将你下载的文件的文件名改成默认的文件名</p></li><li><p>进行“狸猫换太子”，把默认的封面图片替换成你下载的图片即可</p></li><li><p>在GitBash中切换到你的博客所在位置进行一键三连</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo cl <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开你的本地网址<a href="https://localhost:4000/">https://localhost:4000</a>进行访问即可</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 博客搭建之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用hexo搭建静态博客</title>
      <link href="//post/%E5%88%A9%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2.html"/>
      <url>//post/%E5%88%A9%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2.html</url>
      
        <content type="html"><![CDATA[<p>vburfuyuyev</p><iframe src="//player.bilibili.com/player.html?aid=898576540&bvid=BV1TN4y1M72k&cid=775450000&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>cfuyvruyvfuyreyuvfbibvui</p><iframe frameborder="0" src="https://v.qq.com/txp/iframe/player.html?vid=m3360ht1s9b" allowFullScreen="true"></iframe><div style="position: relative; padding: 30% 45%;">  <iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="https://v.qq.com/txp/iframe/player.html?vid=t3360ez4elg" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true">  </iframe></div>]]></content>
      
      
      
        <tags>
            
            <tag> 博客搭建之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo图床搭建</title>
      <link href="//post/picgo%E5%9B%BE%E5%BA%8A%E6%8A%98%E8%85%BE.html"/>
      <url>//post/picgo%E5%9B%BE%E5%BA%8A%E6%8A%98%E8%85%BE.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-PicGo安装"><a href="#1-PicGo安装" class="headerlink" title="1.PicGo安装"></a>1.PicGo安装</h1><p>根据<a href="https://picgo.github.io/PicGo-Doc/zh/guide/">PicGo官方文档</a>进行下载安装即可，根绝个人喜好下载相应版本，建议下载稳定版。</p><h2 id="1-1提供的Windows下载地址"><a href="#1-1提供的Windows下载地址" class="headerlink" title="1.1提供的Windows下载地址"></a>1.1提供的Windows下载地址</h2><ul><li>蓝奏云<a href="https://mrbor.lanzouj.com/iU0dk0dymzdi">下载地址:</a>密码:akb1</li><li>百度网盘 <a href="https://pan.baidu.com/s/18ueEWQzKu3R42EOnYttCmQ?pwd=3wln">下载地址</a>提取码：3wln</li></ul><h1 id="2-使用B站搭建图床"><a href="#2-使用B站搭建图床" class="headerlink" title="2.使用B站搭建图床"></a>2.使用B站搭建图床</h1><p>PicGo中搜索插件bilibili并进行安装，浏览器中打开 <a href="www.bilibili.com">哔哩哔哩动画</a>，如果你和我一样使用的是chrome系浏览器（Edge），按住Fn+F12或者F12（具体打开方式可以百度），或者鼠标右键点击页面任意位置后选择检查元素调出开发者工具，点击加号选择应用程序，选择cookie，bilibili，找到SESSDATA对应的值进行复制，回到picgo然后填入相应的SESSDATA值，将bilibili设置为默认图床，打开Typora,按住Ctrl+逗号调出偏好设置,按照下图进行设置。PicGo路径选择你自己安装的路径即可，最后选择验证图片上传选项，弹出成功的提示，大功告成！</p><p><img src="https://i0.hdslb.com/bfs/album/476c4f380b3c55ff6cf2bca9f24836110deae73e.png" alt="image-20221016034415866"></p><h2 id="2-1补充"><a href="#2-1补充" class="headerlink" title="2.1补充"></a>2.1补充</h2><p>本人博客搭建使用了Hexo框架+Aurora v1.5.5 主题，为正常在博客中显示图片，需要在_config.aurora.yml文件中找到injects，替换为如下部分：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">injects:  scripts:  css:    - <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>referrer<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>no-referrer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当然如果你在injects已经有别的内容，建议直接增加<meta>标签即可，注意格式对齐。</p><h1 id="3-使用GitHub搭建图床"><a href="#3-使用GitHub搭建图床" class="headerlink" title="3.使用GitHub搭建图床"></a>3.使用GitHub搭建图床</h1><p>请保证已经注册一个GitHub账号并且能够正常访问GitHub。首先新建一个仓库用来存放相应的图片，仓库名可以任意取一个你喜欢的名字。</p><h2 id="3-1GitHubTokens生成"><a href="#3-1GitHubTokens生成" class="headerlink" title="3.1GitHubTokens生成"></a>3.1<a href="https://github.com/">GitHub</a>Tokens生成</h2><ul><li>登录进入Github首页</li><li>点击右上角的头像，选择【Settings】</li><li>进入Settings后，点击左侧下方的【Developer settings】</li><li>网页跳转后，选左边的【Personal access tokens】，点击【Generate a personal access token】</li><li>【Note】里填写为什么创建这个Token，可随意填写，下方勾上【repo】即可</li><li>然后会生成一条Token信息，生成的Token只会出现一次，记得复制保存。</li></ul><p><img src="https://i0.hdslb.com/bfs/album/abf19a3f4f4c78028ff17e2113b7a6dbd0bd9bb2.png" alt="image-20221016041643195"></p><h2 id="3-2PicGo设置"><a href="#3-2PicGo设置" class="headerlink" title="3.2PicGo设置"></a>3.2PicGo设置</h2><p>打开运行PicGo，左侧打开【图床设置】，选择【GitHub图床】。<br>参数设置说明：</p><ul><li>仓库名：表示远程仓库地址，固定格式 Github用户名&#x2F;仓库名，前期准备用到的仓库（注意：仓库名不能有空格，如果有空格需要使用-代替）</li><li>分支名：表示分支，默认填入master，需要根据自己Github上的分支进行填写，看个人设置</li><li>Token：填入Github中生成的Token，就是让复制保存的那个</li><li>存储路径：可以自定义一个文件路径</li><li>自定义域名：建议使用https:cdn.jsdelivr.net&#x2F;gh&#x2F;Github用户名&#x2F;仓库名<br>最后记得【<strong>设为默认图床</strong>】</li></ul><p><img src="https://i0.hdslb.com/bfs/album/ac771fab28caf18b483e42a255fa2cad1a5a81b7.png" alt="image-20221016043322552"></p><h2 id="3-3验证图片上传"><a href="#3-3验证图片上传" class="headerlink" title="3.3验证图片上传"></a>3.3验证图片上传</h2><p>在Typora偏好设置的那个界面，点击左下的【验证图片上传选项】，一般还会出现以下三种情况：</p><ul><li>Failed to fetch <ul><li>解决办法：打开【PicGo设置】，点击【设置Server选项】，将端口改为【36677】端口，这是PicGo推荐的默认端口号，然后保存，成功。</li></ul></li><li>“success”:false <ul><li>解决方法：打开【PicGo设置】，将【时间戳重命名】打开</li></ul></li><li>如果报服务端错误解决方法</li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">注意：分支名：由master改为main自定义域名：https://cdn.jsdelivr.net/gh/用户名/仓库名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接:"></a>参考链接:</h1><p><a href="https://www.yuque.com/docs/share/9035662a-f2bd-4ba2-aa24-73acb98635c7">Bilibili获取SESSDATA · 语雀 (yuque.com)</a></p><p><a href="https://blog.csdn.net/qq_49137582/article/details/123757025">Typora使用github图床</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 博客搭建之路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>指令级并行</title>
      <link href="//post/%E6%8C%87%E4%BB%A4%E7%BA%A7%E5%B9%B6%E8%A1%8C.html"/>
      <url>//post/%E6%8C%87%E4%BB%A4%E7%BA%A7%E5%B9%B6%E8%A1%8C.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-指令级并行"><a href="#1-指令级并行" class="headerlink" title="1.指令级并行"></a>1.指令级并行</h1><h2 id="1-1-循环调度"><a href="#1-1-循环调度" class="headerlink" title="1.1 循环调度"></a>1.1 循环调度</h2><h3 id="1-1-1-未调度"><a href="#1-1-1-未调度" class="headerlink" title="1.1.1 未调度"></a>1.1.1 未调度</h3><p><img src="https://i0.hdslb.com/bfs/album/9b670af07d457b26f9ffb391a882ebf911ba431d.png" alt="循环无执行调度"></p><p>以下使用数字代表所在的时钟周期，如②代表第二个时钟周期</p><p>②的停顿原因为浮点寄存器F0进行了写入后，需要一个时钟周期的停顿</p><p>④和⑤的停顿原因为进行了浮点运算ADDD，需要停顿两个时钟周期</p><p>⑧的停顿原因为R1为上一条指令的结果，需要停顿一个时钟周期</p><p>⑩的停顿原因为分支指令有一个延时槽时间，延时槽中的指令一定会被执行</p><h3 id="1-1-2-调度后"><a href="#1-1-2-调度后" class="headerlink" title="1.1.2 调度后"></a>1.1.2 调度后</h3><p><img src="https://i0.hdslb.com/bfs/album/6b5448d2a6374251837499cd20121274b4c6b1ca.png" alt="循环调度后"></p><p>由于前置指令有数据相关，将⑦所对应的指令调度到第一个停顿，即调度后的②，剩下的⑨对应的指令调度到下一个停顿，调度到⑤而不是④的原因为调度到④后，原⑥所对应的指令将无法进行执行，调度到⑤后由于分支指令有一个时钟周期的延时槽，⑥对应的指令将被执行。</p><h3 id="1-1-3-循环展开"><a href="#1-1-3-循环展开" class="headerlink" title="1.1.3 循环展开"></a>1.1.3 循环展开</h3><p>将循环进行展开若干次(如四次)后，可以将相同的数据写入指令等进行集中执行（如同时取出多个数）展开后可以减少引入分支指令的停顿占比，但由于展开后进行数据处理会需要更多的不同名寄存器，代码量也会成倍增加。</p><h2 id="1-2-动态调度"><a href="#1-2-动态调度" class="headerlink" title="1.2 动态调度"></a>1.2 动态调度</h2><h3 id="1-2-1-记分牌技术"><a href="#1-2-1-记分牌技术" class="headerlink" title="1.2.1 记分牌技术"></a>1.2.1 记分牌技术</h3><p><img src="https://i0.hdslb.com/bfs/album/3d1c2027870fd8ddae156b6610edce3773ab2563.png" alt="记分牌结构"></p><p>指令乱序执行，无数据相关，解决写后读</p><h4 id="1-2-1-1-指令流出"><a href="#1-2-1-1-指令流出" class="headerlink" title="1.2.1.1 指令流出"></a>1.2.1.1 指令流出</h4><p>检查指令所需的功能部件空闲，所使用的目的寄存器和正在执行指令的目的寄存器不同（保证无WAW）</p><h4 id="1-2-1-2-读操作数"><a href="#1-2-1-2-读操作数" class="headerlink" title="1.2.1.2 读操作数"></a>1.2.1.2 读操作数</h4><p>如果正在执行的指令对当前指令的源寄存器的写操作，那么该指令阻塞在功能部件处直到指令所需的所有源寄存器就绪（解决RAW）</p><h4 id="1-2-1-3-执行指令"><a href="#1-2-1-3-执行指令" class="headerlink" title="1.2.1.3 执行指令"></a>1.2.1.3 执行指令</h4><p>从已经就绪的源寄存器中取出操作数送到功能部件进行运算，产生计算结果后修改记分牌</p><h4 id="1-2-1-4-写结果"><a href="#1-2-1-4-写结果" class="headerlink" title="1.2.1.4 写结果"></a>1.2.1.4 写结果</h4><p>先检查目的寄存器中的值是否被前面的指令读出使用（包括前面的指令没有读取操作数以及指令的源寄存器为当前指令的目的寄存器），将计算结果写入到目的寄存器（解决WAR）</p><h2 id="1-3-算法"><a href="#1-3-算法" class="headerlink" title="1.3 算法"></a>1.3 算法</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高级计算机体系结构复习笔记</title>
      <link href="//post/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E5%90%8D.html"/>
      <url>//post/%E6%96%B0%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E5%90%8D.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-各种“相关”的学习"><a href="#1-各种“相关”的学习" class="headerlink" title="1.各种“相关”的学习"></a>1.各种“相关”的学习</h1><h2 id="1-1-考试技巧"><a href="#1-1-考试技巧" class="headerlink" title="1.1 考试技巧"></a>1.1 考试技巧</h2><p>判断输出相关的技巧为指令左边出现同名的寄存器，则两条指令发生输出相关，判断真相关（数据相关中的一种）的技巧为先进入流水线的指令的目的寄存器和后一条指令的寄存器相同，产生数据流动，则这两条指令产生真相关，即先执行指令的左部寄存器和后执行的指令的右部的某一个寄存器相同，需要指出的是同一条指令中不发生真相关，如A&#x3D;A+B。</p><h2 id="1-2-补充说明"><a href="#1-2-补充说明" class="headerlink" title="1.2 补充说明"></a>1.2 补充说明</h2><p>循环相关是指在循环指令中，由于循环展开而导致的各种1.1中提到的各种相关，通常将循环展开两次到三次就可以判断循环相关所包含的指令。</p><h2 id="1-3-参考链接"><a href="#1-3-参考链接" class="headerlink" title="1.3 参考链接"></a>1.3 参考链接</h2><p><a href="https://blog.csdn.net/weixin_42319408/article/details/103384820">https://blog.csdn.net/weixin_42319408/article/details/103384820</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="//post/hello-world.html"/>
      <url>//post/hello-world.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
